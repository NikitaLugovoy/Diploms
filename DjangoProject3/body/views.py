import logging

from collections import defaultdict

import pytz

import telebot
from django.contrib.auth import logout
from django.contrib.auth.views import PasswordChangeView
from django.db.models import Count
from django.db.models.functions import TruncDate
from django.http import JsonResponse
from django.shortcuts import render, get_object_or_404, redirect
from django.urls import reverse_lazy
from requests.exceptions import RequestException
from datetime import datetime
from django.conf import settings

from account.models import UserProfile
from .models import OfficeLayout, TelegramUser
from .serializers import OfficeLayoutSerializer, BodySerializer, FloorSerializer

from django.contrib.auth.decorators import login_required

from rest_framework.decorators import permission_classes
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework.response import Response
from rest_framework import status

from .models import (
    PackageDevice, Device, Office, Body, Floor, Application, Status, BreakdownType
)

from .serializers import (
    DeviceSerializer, OfficeSerializer, SendMessageSerializer,
    ApplicationSerializer, CloseApplicationSerializer, SaveApplicationSerializer
)

from django.utils.timezone import now

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = settings.BOT_TOKEN
CHAT_ID = settings.CHAT_ID

import json
import pytesseract
from PIL import Image
import requests

from django.views.decorators.csrf import csrf_exempt
from drf_yasg import openapi
from drf_yasg.utils import swagger_auto_schema
from rest_framework.decorators import api_view

from DjangoProject3 import settings

# https://oauth.yandex.ru/verification_code
OAUTH_TOKEN = settings.OAUTH_TOKEN
FOLDER_ID = settings.FOLDER_ID

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ Tesseract
pytesseract.pytesseract.tesseract_cmd = settings.TESSERACT_PATH


@swagger_auto_schema(method='get', responses={200: ApplicationSerializer(many=True)})
@api_view(["GET"])
def application_list(request):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = request.user
    groups = user.groups.all()
    role = groups[0].name.lower() if groups.exists() else '–±–µ–∑ —Ä–æ–ª–∏'

    # –ü–æ–ª—É—á–∞–µ–º status_id –∏–∑ GET-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    status_id = request.GET.get("status_id")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∏ —Å—á–∏—Ç–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if role == "master":
        # –î–ª—è –º–∞—Å—Ç–µ—Ä–∞: –≤—Å–µ –∑–∞—è–≤–∫–∏ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞
        applications = Application.objects.select_related("office", "device", "status", "breakdown_type")
        if status_id:
            applications = applications.filter(status_id=status_id)
        else:
            applications = applications.filter(status_id=1)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ "—Å–ª–æ–º–∞–Ω–Ω—ã–µ"
        notifications_count = Application.objects.filter(status_id=1).count()  # –í—Å–µ —Å–ª–æ–º–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π: —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        applications = Application.objects.select_related("office", "device", "status", "breakdown_type").filter(
            user=user)
        if status_id:
            applications = applications.filter(status_id=status_id)
        else:
            applications = applications.filter(status_id=1)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ "—Å–ª–æ–º–∞–Ω–Ω—ã–µ"
        notifications_count = Application.objects.filter(user=user,
                                                         status_id=1).count()  # –ó–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å status_id=1

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
    applications = applications.order_by("-data")

    # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    serializer = ApplicationSerializer(applications, many=True)

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print("üîπ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", serializer.data)

    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å AJAX, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON
    if request.headers.get("X-Requested-With") == "XMLHttpRequest":
        return Response(serializer.data)

    # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞
    statuses = Status.objects.all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —Å–µ–ª–µ–∫—Ç–∞
    return render(request, "body/application_list.html", {
        "applications": serializer.data,
        "statuses": statuses,
        "role": role,
        "notifications_count": notifications_count,
        'active_page': 'application_list'
    })


@swagger_auto_schema(method='post', request_body=CloseApplicationSerializer)
@api_view(['POST'])
def close_application(request, application_id):
    print(f"Received request to close application {application_id}")
    application = get_object_or_404(Application, id=application_id)
    print(f"Found application: {application}")

    application.status_id = 3
    application.save()

    device = get_object_or_404(Device, id=application.device_id)
    device.condition_id = 1
    device.save()

    logger.info(f"Application {application_id} closed successfully.")

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫
    return redirect('application_list')


@swagger_auto_schema(method='post', request_body=SaveApplicationSerializer)
@api_view(['POST'])
def save_application(request):
    serializer = SaveApplicationSerializer(data=request.data)
    if serializer.is_valid():
        office_id = serializer.validated_data['office_id']
        device_ids = serializer.validated_data['device_ids']
        reason = serializer.validated_data['reason']
        breakdown_type_id = serializer.validated_data.get('breakdown_type_id')
        user_id = serializer.validated_data.get('user_id')

        application_ids = []
        for device_id in device_ids:
            application = Application.objects.create(
                office_id=office_id,
                device_id=device_id,
                reason=reason,
                user_id=user_id,
                data=now(),
                status_id=1,
                breakdown_type_id=breakdown_type_id
            )
            application.save()
            application_ids.append(application.id)

        logger.info("Applications saved successfully.")
        return Response(
            {'status': 'success', 'message': 'Applications saved successfully!', 'application_ids': application_ids},
            status=status.HTTP_201_CREATED)

    logger.error("Invalid application data received.")
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


def get_device(device_id):
    try:
        return Device.objects.get(id=device_id)
    except Device.DoesNotExist:
        return None


def update_device_condition_by_id(device_id: int):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ ID (condition_id = 4).
    """
    device = get_object_or_404(Device, id=device_id)
    device.condition_id = 4
    device.save()
    return device  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∞ –Ω–µ Response


def get_body_address(body_id: int) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å –∑–¥–∞–Ω–∏—è –ø–æ ID –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É.
    """
    body = get_object_or_404(Body, id=body_id)
    return body.address  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –º–æ–¥–µ–ª–∏ Body –µ—Å—Ç—å –ø–æ–ª–µ address


def get_office_number(office_id: int) -> Response:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä –æ—Ñ–∏—Å–∞ –ø–æ ID.
    """
    office = get_object_or_404(Office, id=office_id)
    return str(office.number)


# –ö—ç—à–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
def get_telegram_bot(token):
    if hasattr(get_telegram_bot, 'bot'):
        return get_telegram_bot.bot

    get_telegram_bot.bot = telebot.TeleBot(token)
    return get_telegram_bot.bot


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_telegram_message(chat_bot: str, chat_id: str, message: str):
    try:
        bot = get_telegram_bot(chat_bot)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {message}")  # –õ–æ–≥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        bot.send_message(chat_id, message)
    except Exception as e:
        logger.error(f"{send_telegram_message.__name__} {e}")


@swagger_auto_schema(
    method='post',
    request_body=SendMessageSerializer,
    responses={200: openapi.Response('–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç', SendMessageSerializer)},
    operation_description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞—è–≤–∫—É.",
)
@api_view(['POST'])
@permission_classes([AllowAny])
def send_message_to_telegram(request):
    logger.info(f"RAW REQUEST DATA: {request.data}")

    serializer = SendMessageSerializer(data=request.data)
    if not serializer.is_valid():
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {serializer.errors}")
        return JsonResponse({'status': 'error', 'message': serializer.errors}, status=400)

    data = serializer.validated_data
    user_message = data.get('message', '')
    selected_filtered_devices = data.get('selected_filtered_devices', [])
    breakdown_type_id = request.data.get('breakdown_type')
    breakdown_type = BreakdownType.objects.get(id=breakdown_type_id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–∏–ø–∞ –ø–æ–ª–æ–º–∫–∏
    breakdown_type_name = "–ù–µ —É–∫–∞–∑–∞–Ω"
    if breakdown_type_id:
        try:
            breakdown_type = BreakdownType.objects.get(id=breakdown_type_id)
            breakdown_type_name = breakdown_type.name
        except BreakdownType.DoesNotExist:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–ª–æ–º–∫–∏: {breakdown_type_id}")

    logger.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø–æ–ª–æ–º–∫–∏: {breakdown_type_id}")
    if not selected_filtered_devices:
        return JsonResponse({'status': 'error', 'message': '–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞!'}, status=400)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    device_details_list = []
    first_office_id = None

    logger.info(f"------------- User ID: {request.user.id}")

    for device_id in selected_filtered_devices:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º select_related –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
            device = Device.objects.select_related(
                'type',
                'package__office__floor',
                'package__office__body'
            ).get(id=device_id)

            updated_device = update_device_condition_by_id(device_id)
            package = device.package
            office = package.office
            floor = office.floor
            body = office.body

            if not first_office_id:
                first_office_id = office.id  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –æ—Ñ–∏—Å

            device_details_list.append(
                f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ID: {device.id}\n"
                f"–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device.type.name}\n"
                f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {device.serial_number}\n"
                f"–¢–∏–ø –ø–æ–ª–æ–º–∫–∏: {breakdown_type.name}\n"
                f"–ü–ö: {package.number}\n"
                f"–ö–∞–±–∏–Ω–µ—Ç: {office.number}\n"
                f"–≠—Ç–∞–∂: {floor.number}\n"
                f"–ö–æ—Ä–ø—É—Å: {body.number}, –ê–¥—Ä–µ—Å: {body.address}\n"
            )
        except Device.DoesNotExist:
            device_details_list.append(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (ID: {device_id})")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    devices_info = "\n".join(device_details_list)
    formatted_message = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö:\n{devices_info}"

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ HTTP-–∑–∞–ø—Ä–æ—Å
    save_application_url = f"{settings.BASE_URL}/body/save-application/"
    try:
        response = requests.post(
            save_application_url,
            json={'office_id': first_office_id, 'device_ids': selected_filtered_devices, 'reason': user_message,
                  'breakdown_type_id': breakdown_type.id, 'user_id': request.user.id},
        )
        response.raise_for_status()
    except RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}")
        return JsonResponse({'status': 'error', 'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏!'}, status=500)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    try:
        send_telegram_message(BOT_TOKEN, CHAT_ID, formatted_message)
        notify_all_users(BOT_TOKEN, f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n{formatted_message}")
        return JsonResponse({'status': 'success', 'message': '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!'}, status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {str(e)}")
        return JsonResponse({'status': 'error', 'message': str(e)}, status=500)

def notify_all_users(bot_token: str, message: str):
    bot = get_telegram_bot(bot_token)
    for user in TelegramUser.objects.all():
        try:
            bot.send_message(user.chat_id, message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.chat_id}: {e}")

@swagger_auto_schema(
    method='get',
    operation_summary="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä–ø—É—Å–æ–≤, —ç—Ç–∞–∂–µ–π –∏ –æ—Ñ–∏—Å–æ–≤",
    responses={200: "–°–ø–∏—Å–æ–∫ –∫–æ—Ä–ø—É—Å–æ–≤, —ç—Ç–∞–∂–µ–π –∏ –æ—Ñ–∏—Å–æ–≤"}
)
@swagger_auto_schema(
    method='post',
    operation_summary="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ñ–∏—Å–æ–≤, –ø–∞–∫–µ—Ç–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
    request_body=openapi.Schema(
        type=openapi.TYPE_OBJECT,
        properties={
            "selected_bodies": openapi.Schema(type=openapi.TYPE_ARRAY, items=openapi.Items(type=openapi.TYPE_INTEGER)),
            "selected_floors": openapi.Schema(type=openapi.TYPE_ARRAY, items=openapi.Items(type=openapi.TYPE_INTEGER)),
            "selected_offices": openapi.Schema(type=openapi.TYPE_ARRAY, items=openapi.Items(type=openapi.TYPE_INTEGER)),
            "selected_package_devices": openapi.Schema(type=openapi.TYPE_ARRAY,
                                                       items=openapi.Items(type=openapi.TYPE_INTEGER)),
        },
    ),
    responses={200: "–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ñ–∏—Å—ã, –ø–∞–∫–µ—Ç—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"}
)
@api_view(["GET", "POST"])
def body_list(request):
    user = request.user
    groups = user.groups.all()
    role = groups[0].name.lower() if groups.exists() else '–±–µ–∑ —Ä–æ–ª–∏'

    # –ü–æ–¥—Å—á–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if role == "master":
        notifications_count = Application.objects.filter(status_id=1).count()
    else:
        notifications_count = Application.objects.filter(user=user, status_id=1).count()

    if request.method == "POST":
        selected_bodies = list(map(int, request.POST.getlist("selected_bodies", [])))
        selected_floors = list(map(int, request.POST.getlist("selected_floors", [])))
        selected_offices = list(map(int, request.POST.getlist("selected_offices", [])))
        selected_package_devices = list(map(int, request.POST.getlist("selected_package_devices", [])))
        selected_filtered_devices = list(map(int, request.POST.getlist("selected_filtered_devices", [])))

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —ç—Ç–∞–∂–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–æ—Ä–ø—É—Å–∞–º
        floors = Floor.objects.all()
        if selected_bodies:
            floors = floors.filter(bodies__id__in=selected_bodies).distinct()

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ñ–∏—Å–æ–≤
        offices = Office.objects.all()
        if selected_bodies:
            offices = offices.filter(body_id__in=selected_bodies)
        if selected_floors:
            offices = offices.filter(floor_id__in=selected_floors)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞–∫–µ—Ç–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        package_devices = PackageDevice.objects.filter(office_id__in=selected_offices) if selected_offices else []

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        devices = Device.objects.filter(package_id__in=selected_package_devices) if selected_package_devices else Device.objects.all()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ñ–∏—Å–æ–≤
        layouts = OfficeLayout.objects.filter(office_id__in=selected_offices).prefetch_related('device_positions') if selected_offices else []

        # –¢–∏–ø—ã –ø–æ–ª–æ–º–æ–∫
        breakdown_types = BreakdownType.objects.all()
        breakdown_types_data = [{"id": b.id, "name": b.name} for b in breakdown_types]

        # –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º condition_id –¥–ª—è –ø–∞–∫–µ—Ç–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        package_devices_with_condition = []
        for package_device in package_devices:
            devices_in_package = Device.objects.filter(package_id=package_device.id)
            condition = "1"
            for device in devices_in_package:
                if device.condition_id in [4, 6]:
                    condition = str(device.condition_id)
                    break
            package_devices_with_condition.append({
                "id": package_device.id,
                "number": package_device.number,
                "office_id": package_device.office_id or None,
                "condition_id": condition,
            })

        if request.headers.get("X-Requested-With") == "XMLHttpRequest":
            return JsonResponse({
                "bodies": BodySerializer(Body.objects.all(), many=True).data,
                "floors": FloorSerializer(floors, many=True).data,
                "offices": OfficeSerializer(offices, many=True).data,
                "package_devices": package_devices_with_condition,
                "devices": DeviceSerializer(devices, many=True).data,
                "layouts": OfficeLayoutSerializer(layouts, many=True).data,
                "breakdown_types": breakdown_types_data,
            })

    # GET-–∑–∞–ø—Ä–æ—Å
    bodies = Body.objects.all()
    floors = Floor.objects.all()
    offices = Office.objects.all()
    return render(request, "body/body_list.html", {
        "bodies": bodies,
        "floors": floors,
        "offices": offices,
        "package_devices": [],
        "devices": [],
        "role": role,
        "notifications_count": notifications_count,
        'active_page': 'body_list'
    })

@swagger_auto_schema(
    method="get",
    operation_summary="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫",
    responses={200: "–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç"},
)
@swagger_auto_schema(
    method="post",
    operation_summary="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫",
    request_body=openapi.Schema(
        type=openapi.TYPE_OBJECT,
        properties={
            "selected_schedules": openapi.Schema(
                type=openapi.TYPE_ARRAY, items=openapi.Schema(type=openapi.TYPE_INTEGER)
            ),
            "selected_packages": openapi.Schema(
                type=openapi.TYPE_ARRAY, items=openapi.Schema(type=openapi.TYPE_INTEGER)
            ),
            "selected_devices": openapi.Schema(
                type=openapi.TYPE_ARRAY, items=openapi.Schema(type=openapi.TYPE_INTEGER)
            ),
        },
    ),
    responses={200: "–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç"},
)
@api_view(["GET", "POST"])
@login_required
def fastapplication_list(request):
    user = request.user
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –∏–∑ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã, –∫–∞–∫ –≤ user_dashboard
    groups = user.groups.all()
    role = groups[0].name.lower() if groups.exists() else '–ë–µ–∑ —Ä–æ–ª–∏'
    notifications_count = Application.objects.filter(user=user, status_id=1).count()
    full_name = f"{request.user.last_name} {request.user.first_name}"
    print("–¢–µ–∫—É—â–µ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", full_name)

    moscow_tz = pytz.timezone('Europe/Moscow')
    current_time = datetime.now(moscow_tz)
    current_time_str = current_time.strftime('%H:%M:%S')

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    teacher_name = f"{request.user.last_name} {request.user.first_name}"
    api_url = f"http://api.bgitu-compass.ru/v2/teacherSearch?teacher={teacher_name}&dateFrom={current_time.date()}&dateTo={current_time.date()}"
    office = None
    filtered_schedule = []

    try:
        response = requests.get(api_url)
        if response.status_code == 200:
            teacher_schedule = response.json()
            for record in teacher_schedule:
                start_time = datetime.strptime(record['startAt'], '%H:%M:%S').time()
                end_time = datetime.strptime(record['endAt'], '%H:%M:%S').time()
                current_time_only = datetime.strptime(current_time_str, '%H:%M:%S').time()
                if start_time <= current_time_only <= end_time:
                    filtered_schedule.append(record)
                    classroom = record['classroom']
                    try:
                        office = Office.objects.get(number=classroom)
                        print(f"ID –æ—Ñ–∏—Å–∞: {office.id}")
                    except Office.DoesNotExist:
                        print(f"–û—Ñ–∏—Å —Å –Ω–æ–º–µ—Ä–æ–º {classroom} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å API: {e}")

    # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ñ–∏—Å–∞
    office_ids = [office.id] if office else []

    if request.method == "POST":
        selected_schedules = list(map(int, request.POST.getlist("selected_schedules", office_ids)))
        selected_packages = list(
            map(int, request.POST.getlist("selected_package_devices", [])))  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ selected_package_devices
        selected_devices = list(map(int, request.POST.getlist("selected_filtered_devices", [])))

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ñ–∏—Å–æ–≤
        offices = Office.objects.all()
        if selected_schedules:
            offices = offices.filter(id__in=selected_schedules)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞–∫–µ—Ç–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        package_devices = PackageDevice.objects.filter(office_id__in=selected_schedules or office_ids)
        if selected_packages:
            devices = Device.objects.filter(package_id__in=selected_packages)
        else:
            devices = Device.objects.all()

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ package_id
        devices = Device.objects.filter(package_id__in=selected_packages) if selected_packages else Device.objects.all()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ñ–∏—Å–æ–≤
        layouts = OfficeLayout.objects.filter(office_id__in=selected_schedules or office_ids).prefetch_related(
            'device_positions')

        # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å package_id
        package_devices_with_condition = []
        for package_device in package_devices:
            devices_in_package = Device.objects.filter(package_id=package_device.id)
            condition = "1"
            for device in devices_in_package:
                if device.condition_id in [4, 6]:
                    condition = str(device.condition_id)
                    break
            package_devices_with_condition.append({
                "id": package_device.id,
                "number": package_device.number,
                "office_id": package_device.office_id or None,
                "condition_id": condition,
                "has_warning": condition == "4"
            })

        breakdown_types = BreakdownType.objects.all()
        breakdown_types_data = [{"id": b.id, "name": b.name} for b in breakdown_types]

        if request.headers.get("X-Requested-With") == "XMLHttpRequest":
            return JsonResponse({
                "schedules": filtered_schedule,
                "offices": OfficeSerializer(offices, many=True).data,
                "package_devices": package_devices_with_condition,
                "devices": DeviceSerializer(devices, many=True).data,
                # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ DeviceSerializer –≤–∫–ª—é—á–∞–µ—Ç package_id
                "breakdown_types": breakdown_types_data,
                "layouts": OfficeLayoutSerializer(layouts, many=True).data
            })

    # GET-–∑–∞–ø—Ä–æ—Å
    offices = Office.objects.all()
    return render(request, "body/fastapplication_list.html", {
        "schedules": filtered_schedule,
        "package_devices": [],
        "devices": [],
        "breakdown_types": [],
        "layouts": [],
        "offices": offices,
        "role": role,
        "notifications_count": notifications_count,
        'active_page': 'fastapplication_list'
    })


def get_iam_token(oauth_token):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IAM-—Ç–æ–∫–µ–Ω–∞ –∏–∑ OAuth-—Ç–æ–∫–µ–Ω–∞"""
    url = "https://iam.api.cloud.yandex.net/iam/v1/tokens"
    response = requests.post(url, json={"yandexPassportOauthToken": oauth_token})

    if response.status_code == 200:
        return response.json().get("iamToken")
    else:
        raise Exception(f"IAM-—Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω: {response.text}")


@csrf_exempt
@swagger_auto_schema(
    method="post",
    operation_summary="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å Yandex GPT",
    request_body=openapi.Schema(
        type=openapi.TYPE_OBJECT,
        properties={
            "user_text": openapi.Schema(type=openapi.TYPE_STRING, description="–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞"),
        },
        required=["user_text"],
    ),
    responses={
        200: openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                "generated_text": openapi.Schema(type=openapi.TYPE_STRING, description="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
            }
        ),
        400: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å",
        500: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
    },
)
@api_view(["GET", "POST"])
@login_required  # –¢—Ä–µ–±—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
def yagpt_page(request):
    if request.method == "GET":
        user = request.user
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –∏–∑ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã, –∫–∞–∫ –≤ user_dashboard
        groups = user.groups.all()
        role = groups[0].name.lower() if groups.exists() else '–ë–µ–∑ —Ä–æ–ª–∏'
        notifications_count = Application.objects.filter(user=user, status_id=1).count()

        context = {'role': role, 'notifications_count': notifications_count, 'active_page': 'ya_index'}
        return render(request, "body/ya_index.html", context)

    elif request.method == "POST":
        user_text = None
        if 'image_file' in request.FILES:
            image_file = request.FILES['image_file']
            image = Image.open(image_file)
            user_text = "–ö–∞–∫ —Ä–µ—à–∏—Ç—å " + pytesseract.image_to_string(image, lang='rus+eng').strip()
            if not user_text:
                return JsonResponse({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç'}, status=400)
        elif 'user_text' in request.POST:
            user_text = request.POST['user_text'].strip()
        else:
            return JsonResponse({'error': '–¢–µ–∫—Å—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω'}, status=400)

        try:
            IAM_TOKEN = get_iam_token(OAUTH_TOKEN)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
            response = requests.post(
                "https://llm.api.cloud.yandex.net/foundationModels/v1/completion",
                headers={
                    "Authorization": f"Bearer {IAM_TOKEN}",
                    "Content-Type": "application/json"
                },
                json={
                    "modelUri": f"gpt://{FOLDER_ID}/yandexgpt/latest",  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ FOLDER_ID –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
                    "completionOptions": {"stream": False, "temperature": 0.7},
                    "messages": [
                        {"role": "system",
                         "text": "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä. –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, —Å–±–æ—Ä–∫–æ–π –ü–ö –∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–º –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ–º."},
                        {"role": "user", "text": user_text}
                    ]
                }
            )
            if response.status_code == 200:
                generated_text = response.json()["result"]["alternatives"][0]["message"]["text"]
                truncated_text = generated_text[:850]
                return JsonResponse({'generated_text': truncated_text}, json_dumps_params={"ensure_ascii": False})
            else:
                return JsonResponse({'error': response.text}, status=response.status_code)
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)


@login_required
def user_dashboard(request):
    user = request.user
    groups = user.groups.all()
    role = groups[0].name if groups.exists() else '–ë–µ–∑ —Ä–æ–ª–∏'

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∏ —Å—á–∏—Ç–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if role == "master":
        # –î–ª—è –º–∞—Å—Ç–µ—Ä–∞: –≤—Å–µ –∑–∞—è–≤–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
        applications = Application.objects.filter(status_id=1).order_by("-data")
        notifications_count = applications.count()  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
        # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
        application_serializer = ApplicationSerializer(applications, many=True)
        application_data = application_serializer.data
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞—è–≤–æ–∫ –ø–æ office_number –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
        grouped_applications = defaultdict(list)
        for app in application_data:
            grouped_applications[app['office_number']].append(app)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        grouped_applications_list = [
            {'office_number': office, 'applications': apps}
            for office, apps in grouped_applications.items()
        ]
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞–±–∏–Ω–µ—Ç–∞
        grouped_applications_list = sorted(grouped_applications_list, key=lambda x: x['office_number'])
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π: —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        applications = Application.objects.filter(user=user, status_id=1)
        notifications_count = applications.count()  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
        application_serializer = ApplicationSerializer(applications, many=True)
        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        grouped_applications_list = []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–µ-–º–∞—Å—Ç–µ—Ä–æ–≤
        application_data = application_serializer.data

    # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        profile = user.userprofile
        avatar_url = profile.avatar.url if profile.avatar else None
    except UserProfile.DoesNotExist:
        avatar_url = None

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"Role: {role}, Notifications count: {notifications_count}")

    return render(
        request,
        "body/lkuser.html",
        {
            "user": user,
            "grouped_applications": grouped_applications_list,
            "applications": application_data,
            "notifications_count": notifications_count,
            "role": role,
            "avatar_url": avatar_url,
            'active_page': 'lkuser'
        }
    )


@login_required
def delete_application(request, application_id):
    if request.method == "POST":

        application = get_object_or_404(Application, id=application_id, user=request.user)
        device = get_object_or_404(Device, id=application.device_id)
        device.condition_id = 1  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 1 ‚Äî —ç—Ç–æ "–°–≤–æ–±–æ–¥–µ–Ω" –∏–ª–∏ "–†–∞–±–æ—Ç–∞–µ—Ç"
        device.save()
        application.delete()
        return JsonResponse({"message": "–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞"}, status=200)

    return JsonResponse({"error": "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω"}, status=405)


@swagger_auto_schema(method='post', responses={200: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω'})
@api_view(['POST'])
@permission_classes([IsAuthenticated])
def logout_view(request):
    logout(request)
    return redirect('login')


class CustomPasswordChangeView(PasswordChangeView):
    template_name = "body/password_change.html"
    success_url = reverse_lazy("lkuser")


@swagger_auto_schema(
    method='get',
    manual_parameters=[
        openapi.Parameter(
            'office_id',
            openapi.IN_QUERY,
            description="ID –∫–∞–±–∏–Ω–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ª–æ–º–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ —Ç–∏–ø–∞ –ø–æ–ª–æ–º–æ–∫",
            type=openapi.TYPE_INTEGER,
            required=False
        )
    ],
    responses={200: "–£—Å–ø–µ—à–Ω–æ", 400: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"}
)
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def device_breakdown_stats(request):
    user = request.user
    groups = user.groups.all()
    role = groups[0].name.lower() if groups.exists() else '–ë–µ–∑ —Ä–æ–ª–∏'
    notifications_count = Application.objects.filter(user=user, status_id=1).count()

    office_stats = (
        Application.objects
        .exclude(status__id=3)
        .values("office__id", "office__number", "office__body__number")
        .annotate(broken_count=Count("device"))
    )

    stats_data = [
        {
            "office_id": entry["office__id"],
            "office_number": entry["office__number"],
            "body_number": entry["office__body__number"],
            "broken_count": entry["broken_count"],
        } for entry in office_stats
    ]

    heatmap_raw = (
        Application.objects
        .exclude(status__id=3)
        .annotate(date_only=TruncDate('data'))
        .values('date_only')
        .annotate(count=Count('id'))
        .order_by('date_only')
    )

    heatmap_data = [
        {"date": entry["date_only"].strftime("%Y-%m-%d"), "count": entry["count"]}
        for entry in heatmap_raw
    ]

    if request.GET.get("office_id") and request.headers.get('x-requested-with') == 'XMLHttpRequest':
        office_id = int(request.GET["office_id"])
        broken_devices = (
            Application.objects
            .exclude(status__id=3)
            .filter(office__id=office_id)
            .select_related("device", "office", "breakdown_type")
        )

        breakdown_type_counts = (
            broken_devices
            .values('breakdown_type__name')
            .annotate(count=Count('breakdown_type'))
        )

        breakdown_type_data = [
            {"type": entry["breakdown_type__name"], "count": entry["count"]}
            for entry in breakdown_type_counts
        ]

        broken_serializer = ApplicationSerializer(broken_devices, many=True)

        return JsonResponse({
            "broken_devices": broken_serializer.data,
            "breakdown_type_data": breakdown_type_data,
        })

    return render(request, "body/device_stats.html", {
        "stats_data": stats_data,
        "selected_office": request.GET.get("office_id"),
        "broken_devices": [],
        "chart_data": json.dumps(stats_data),
        "heatmap_data": json.dumps(heatmap_data),
        "breakdown_type_data": json.dumps([]),
        "role": role,
        "notifications_count": notifications_count,
        'active_page': 'device_stats'
    })
