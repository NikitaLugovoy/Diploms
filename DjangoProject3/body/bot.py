import logging
import asyncio
import os
from dotenv import load_dotenv
import django

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º .env –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "DjangoProject3.settings")
django.setup()

from django.conf import settings
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

from body.models import Application, TelegramUser
from django.contrib.auth.models import User

from asgiref.sync import sync_to_async

from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = settings.BOT_TOKEN
CHAT_ID = settings.CHAT_ID

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    chat_id = str(message.from_user.id)
    username = message.from_user.username

    await sync_to_async(TelegramUser.objects.get_or_create)(
        chat_id=chat_id,
        defaults={"username": username}
    )

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìã –ó–∞—è–≤–∫–∏"), KeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É")]],
        resize_keyboard=True
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


PAGE_SIZE = 10



async def send_applications_page(message_or_callback, page=1):

    status_id = 1
    offset = (page - 1) * PAGE_SIZE

    total_count = await sync_to_async(lambda: Application.objects.filter(status_id=status_id).count())()

    applications = await sync_to_async(
        lambda: list(
            Application.objects
            .select_related(
                "office", "device__type", "device__package__office__floor", "device__package__office__body", "status", "breakdown_type"
            )
            .filter(status_id=status_id)
            .order_by("-data")[offset:offset + PAGE_SIZE]
        )
    )()

    if not applications:
        text = "–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."
    else:
        pages_count = (total_count + PAGE_SIZE - 1) // PAGE_SIZE
        text = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{pages_count}\n"
        for app in applications:
            device = app.device
            device_office = device.package.office
            floor = device_office.floor if device_office else None
            body = device_office.body if device_office else None

            text += (
                f"üÜî –ó–∞—è–≤–∫–∞ ‚Ññ{app.id}\n"
                f"üõ† –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device.type.name}\n"
                f"üõ† –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.serial_number}\n"
                f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –ü–ö (–ø–∞–∫–µ—Ç): {device.package.number}\n"
                f"üñ• –ü–ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–±–∏–Ω–µ—Ç–µ ‚Ññ{device_office.number if device_office else '‚Äî'}\n"
                f"üìç –ö–∞–±–∏–Ω–µ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –Ω–∞ —ç—Ç–∞–∂–µ: {floor.number if floor else '‚Äî'}\n"
                f"üè¢ –í –∫–æ—Ä–ø—É—Å–µ: {body.number if body else '‚Äî'}, –∞–¥—Ä–µ—Å: {body.address if body else '‚Äî'}\n"
                f"‚ö†Ô∏è –¢–∏–ø –ø–æ–ª–æ–º–∫–∏: {app.breakdown_type.name if app.breakdown_type else '‚Äî'}\n"
                f"üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: {app.data.strftime('%d.%m.%Y %H:%M')}\n"
                f"–°—Ç–∞—Ç—É—Å: {app.status.name}\n\n"
            )

    buttons = []
    if page > 1:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"apps_page:{page - 1}"))
    if offset + PAGE_SIZE < total_count:
        buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"apps_page:{page + 1}"))

    if buttons:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons], row_width=2)
    else:
        keyboard = None

    if isinstance(message_or_callback, types.Message):
        await message_or_callback.answer(text, reply_markup=keyboard)
    elif isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.edit_text(text, reply_markup=keyboard)
        await message_or_callback.answer()


@dp.callback_query(lambda c: c.data and c.data.startswith("apps_page:"))
async def process_pagination_callback(callback_query: CallbackQuery):
    page_str = callback_query.data.split(":")[1]
    if page_str.isdigit():
        page = int(page_str)
        await send_applications_page(callback_query, page=page)
    else:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)


@dp.message()
async def handle_text(message: types.Message):
    logger.info(f"Text message received: {message.text} from user {message.from_user.id}")

    if message.text == "üìã –ó–∞—è–≤–∫–∏":
        await send_applications_page(message, page=1)

    elif message.text == "‚ùå –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å.")

    elif message.text and message.text.isdigit():
        app_id = int(message.text)
        try:
            application = await sync_to_async(Application.objects.get)(id=app_id)
            application.status_id = 3  # –°—Ç–∞—Ç—É—Å "–ó–∞–∫—Ä—ã—Ç–æ"
            await sync_to_async(application.save)()
            await message.answer(f"–ó–∞—è–≤–∫–∞ ‚Ññ{app_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞.")
            logger.info(f"Application {app_id} closed by user {message.from_user.id}")
        except Application.DoesNotExist:
            await message.answer(f"–ó–∞—è–≤–∫–∞ ‚Ññ{app_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            logger.warning(f"Application {app_id} not found when closing by user {message.from_user.id}")

    else:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        pass


async def main():
    logger.info("Starting bot polling...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
